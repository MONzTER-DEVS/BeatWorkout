name: build-binaries
on:
  workflow_dispatch:
    inputs:
      debug:
        description: 'Debug (y/n)'
        required: true
        default: "n"


jobs:
  build-mobile:
    name: build-apk
    runs-on: ubuntu-18.04

    steps:

      - name: "get code"
        uses: actions/checkout@v2

      - name: "install python"
        uses: actions/setup-python@v2
        with:
          python-version: '3.7.9'
          architecture: x64

      - name: pip cache
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: android-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            android-pip-

      - name: "update the machine"
        run: sudo apt-get -y update

      - name: "install python packages"
        run: python3 -m pip install buildozer cython && python3 -m pip install -r requirements.txt

      - name: "install dependencies"
        run: |
          sudo apt install -y zip unzip openjdk-8-jdk && \
          sudo apt-get update && \
          sudo apt-get install build-essential && \
          sudo apt-get install libstdc++6 && \
          sudo apt-get install aidl && \
          sudo apt install -y autoconf libtool pkg-config zlib1g-dev libncurses5-dev libncursesw5-dev libtinfo5 cmake libffi-dev

      - name: "set path"
        run: cd src && export PATH=$PATH:~/.locl/bin/

      - name: "cache compile results"
        uses: actions/cache@v2
        with:
          path: /home/runner/work/BeatWorkout/BeatWorkout/src/.buildozer/android
          key: android-sdk-${{hashFiles('src/buildozer.spec')}}
          restore-keys: |
            android-sdk-

      - name: "compile (release version)"
        if: ${{ github.event.inputs.debug == 'n' }}
        run: cd src && buildozer -v android release

      - name: "compile (debug version)"
        if: ${{ !(github.event.inputs.debug == 'n') }}
        run: cd src && buildozer -v android debug

      - name: "upload"
        uses: actions/upload-artifact@v2
        with:
          name: apk
          path: src/bin/*

  build-desktop:

    strategy:
      matrix:
        include:

          - Target: "windows"
          - os: "windows-latest"
          - architecture: ["x86", "x64"]

    runs-on: ${{ os }}

    steps:

      - name: "get code"
        uses: actions/checkout@v2

      - name: "setup python"
        uses: actions/setup-python@v2
        with:
          python-version: "3.7.9"
          architecture: ${{ matrix.architecture }}

      - name: "Get pip cache dir"
        id: pip-cache
        run: |
            echo "::set-output name=dir::$(pip cache dir)"

      - name: "pip cache"
        uses: actions/cache@v2
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ matrix.Target }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ matrix.TARGET }}-pip-

      - name: "install dependencies"
        run: python3 -m pip install -r requirements.txt && python3 -m pip install pyinstaller

      - name: "build"
        run: cd src/ && pyinstaller pyinstaller.spec

      - name: "upload"
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.Target }}-${{ matrix.architecture }}
          path: src/dist/
